[{"author":"Dreamsture","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">将json对象转化为java对象？<\/h3>\n\n        <div class=\"new_content\"> \n          TestBean tb = new TestBean();\r<br />tb.setName(\"闫燕飞\");\r<br />tb.setSex(\"男\");\r<br />List&lt;String&gt; list = new ArrayList&lt;String&gt;();\r<br />list.add(\"mother\");\r<br />list.add(\"father\");\r<br />tb.setParentName(list);\r<br />//将一个实体类对象转化为json对象\r<br />JSONObject jo1= JSONObject.fromObject(tb);\r<br />\r<br />//将json对象转化为java对象(这里编译通过，执行的时候报异常)\r<br />TestBean tb1 = (TestBean)JSONSerializer.toJava(jo1);\r<br />\r<br />\r<br />\r<br />\r<br />异常：Exception in thread \"main\" java.lang.ClassCastException: net.sf.ezmorph.bean.MorphDynaBean cannot be cast to com.second.TestBean\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>请大家帮忙分析一下这是为什么？谢谢\n          <\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-02 16:46:00","id":0,"source":"http://www.iteye.com/problems/102191","title":"将json对象转化为java对象？","typeId":0,"updateTime":"2014-07-02 16:46:00"},{"author":"gagapear","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212082\">\n          <p>加这两行在TestBean tb1 = (TestBean)JSONSerializer.toJava(jo1); 前面试试\r<br />\r<br />net.sf.json.JsonConfig jsonConfig = new net.sf.json.JsonConfig();\r<br />jsonConfig.setRootClass(TestBean.class);<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:51","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:51"}]
[{"author":"newstong1","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">地址栏输入excel文件，乱码<\/h3>\n\n        <div class=\"new_content\"> \n          http://127.0.0.1:8080/xxx/aaa.xls\r<br />\r<br />输入完乱码，但有的IE不乱直接下载，有的就乱码，为什么，如何解决\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-02 16:17:00","id":0,"source":"http://www.iteye.com/problems/102188","title":"地址栏输入excel文件，乱码","typeId":0,"updateTime":"2014-07-02 16:17:00"},{"author":"energykey","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212076\">\n          <p>在TOMCAT的web.xml文件里加入&nbsp; \r<br />&lt;mime-mapping&gt; \r<br />&nbsp;&nbsp;&nbsp; &lt;extension&gt;xls&lt;/extension&gt; \r<br />&nbsp;&nbsp;&nbsp; &lt;mime-type&gt;application/vnd.ms-excel&lt;/mime-type&gt; \r<br />&nbsp; &lt;/mime-mapping&gt;\r<br />\r<br />浏览器就是根据mime-type来判断是图片还是文件还是网页的。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:52","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:52"}]
[{"author":"舅是来坑你的","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">JS正则表达式整检查输入字符串是否符合正整数格式<\/h3>\n\n        <div class=\"new_content\"> \n          以下是JS代码\r<br />是对分页做了一个判断\r<br />\r<br />&lt;a href=\"javascript:submitPageForm('bxgMaterialManageForm',2,10)\"&gt;&lt;/a&gt;\r<br />这个是下一页\r<br />调试的时候JS内获取到s对象\r<br />值为2\r<br />但是到if (s.search(re) != -1) {\r<br />这个地方会报TypeError: s.search is not a function\r<br />这个错误为什么？\r<br />/*\r<br />用途：检查输入字符串是否符合正整数格式\r<br />输入：\r<br />\ts：字符串\r<br />返回：\r<br />\t如果通过验证返回true,否则返回false\t\r<br />*/\r<br />function isNumber( s ){&nbsp;&nbsp; \r<br />\tvar regu = \"^[0-9]+$\";\r<br />\tvar re = new RegExp(regu);\r<br />\tif (s.search(re) != -1) {\r<br />\t&nbsp;&nbsp; return true;\r<br />\t} else {\r<br />\t&nbsp;&nbsp; return false;\r<br />\t}\r<br />}\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-30 16:51:00","id":0,"source":"http://www.iteye.com/problems/102166","title":"JS正则表达式整检查输入字符串是否符合正整数格式","typeId":0,"updateTime":"2014-06-30 16:51:00"},{"author":"a496649849","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212046\">\n          <p>应该是由于别的原因导致的，我刚刚测试一下你的函数s.search 这里没有问题<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:52","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:52"}]
[{"author":"rapin","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">Spring Security认证后 如何获取更多的用户信息?<\/h3>\n\n        <div class=\"new_content\"> \n          <div class=\"iteye-blog-content-contain\" style=\"font-size: 14px;\">\r\n<p>使用Spring Security认证后，如何在页面中获取更多的用户信息？<\/p>\r\n<p>例如用户的电话号码、email地址等等，这些数据如何自定义到用户信息里？<\/p>\r\n<p>?<\/p>\r\n<p>?<\/p>\r\n<\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-26 18:01:00","id":0,"source":"http://www.iteye.com/problems/102126","title":"Spring Security认证后 如何获取更多的用户信息?","typeId":0,"updateTime":"2014-06-26 18:01:00"},{"author":"ieanwfg201","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_211979\">\n          <p>具体实现例子我没有，但是可以给你说下怎么样去获取。\r<br />一般情况下，如果你扩展springscurity，都会扩展自己的用户以及权限验证，而springsecurity的默认UserDetail应该是不包含你的这些信息的，所以如果你要获取这些信息，要不是在验证过程中直接将这些信息放入authorication对象中，要不就是从数据库中读取。两种放入操作如下\r<br />1 扩展userdetail对象，将你的邮件，手机登信息加进去。然后自定义自己的验证方法类，在验证完成后，见对应的这些信息同时从数据库获取到，并设置到这个userdetail中，同时将包好了userdetail的authorication对象放入session中。这样你可以直接从session中获取到了，这种方法是最直接的方式，很方便，需要做的是你自己扩展userdetail以及权限管理这一块，网上很多这种实现。另外，关于你如何获取到session中的authorication对象，我记得struts2和springmvc都是有获取方法的，你可以查询下。\r<br />2 第二种更简单了，就是你无需扩展，但是每次需要展示页面这些信息的，自己去数据库查询并且传入到前台去即可。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:52","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:52"}]
[{"author":"lee3836","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">maven打war 自定义properties 到jsp页面<\/h3>\n\n        <div class=\"new_content\"> \n          在maven打war包时，pom.xml自定义的properites 可以打到*.properties文件中，但是在*.jsp中引用自定义变量无法打入，求一份可以打到jsp中的pom.xml\r<br />\r<br />自定义变量是在pom.xml的 profile properties 中定义的，比如以下域名：图片域名、样式域名等等。在jsp页面中有引入样式形如\r<br /><pre class=\"java\" name=\"code\">&lt;link href=\"${profile.xxx.domain}/a/b/c.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;<\/pre>\r<br />\r<br />profile.xxx.domain 实在 pom.xml 中\r<br /> <pre class=\"java\" name=\"code\">&lt;profile&gt;\r\n            &lt;id&gt;development-ws&lt;/id&gt;\r\n            &lt;properties&gt;\r\n&lt;profile.xxx.domain&gt;http://www.jd.com/&lt;/profile.xxx.domain&gt;\r\n          &lt;/properties&gt;\r\n        &lt;/profile&gt;<\/pre>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-02 11:39:00","id":0,"source":"http://www.iteye.com/problems/102182","title":"maven打war 自定义properties 到jsp页面","typeId":0,"updateTime":"2014-07-02 11:39:00"},{"author":"hae","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212068\">\n          <p>给你个完整的看看:\r<br />\r<br /><\/p><pre class=\"java\" name=\"code\">&lt;build&gt;\r\n\t&lt;resources&gt;\r\n\t\t&lt;resource&gt;\r\n\t\t\t&lt;directory&gt;src/main/resources&lt;/directory&gt;\r\n\t\t\t&lt;includes&gt;\r\n\t\t\t\t&lt;include&gt;*.*&lt;/include&gt;\r\n\t\t\t\t&lt;include&gt;**/*.*&lt;/include&gt;\r\n\t\t\t&lt;/includes&gt;\r\n\t\t\t&lt;filtering&gt;true&lt;/filtering&gt;\r\n\t\t&lt;/resource&gt;\r\n\t&lt;/resources&gt;\t\r\n\t&lt;plugins&gt;\r\n\t\t&lt;!-- compiler插件, 设定JDK版本 --&gt;\r\n\t\t&lt;plugin&gt;\r\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\r\n\t\t\t&lt;version&gt;3.0&lt;/version&gt;\r\n\t\t\t&lt;configuration&gt;\r\n\t\t\t\t&lt;source&gt;${jdk.version}&lt;/source&gt;\r\n\t\t\t\t&lt;target&gt;${jdk.version}&lt;/target&gt;\r\n\t\t\t\t&lt;showWarnings&gt;true&lt;/showWarnings&gt;\r\n\t\t\t&lt;/configuration&gt;\r\n\t\t&lt;/plugin&gt;\r\n\r\n\t\t&lt;!-- war打包插件, 设定war包名称不带版本号 --&gt;\r\n\t\t&lt;plugin&gt;\r\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\r\n\t\t\t&lt;version&gt;2.3&lt;/version&gt;\r\n\t\t\t&lt;configuration&gt;\r\n\t\t\t\t&lt;warName&gt;${project.artifactId}&lt;/warName&gt;\r\n\t\t\t\t&lt;webResources&gt;\r\n\t\t\t\t\t&lt;resource&gt;\r\n\t\t\t\t\t\t&lt;directory&gt;src/main/webapp&lt;/directory&gt;\r\n\t\t\t\t\t\t&lt;includes&gt;\r\n\t\t\t\t\t\t\t&lt;include&gt;*.*&lt;/include&gt;\r\n\t\t\t\t\t\t\t&lt;include&gt;**/*.*&lt;/include&gt;\r\n\t\t\t\t\t\t&lt;/includes&gt;\r\n\t\t\t\t\t\t&lt;filtering&gt;true&lt;/filtering&gt;\r\n\t\t\t\t\t&lt;/resource&gt;\r\n\t\t\t\t&lt;/webResources&gt;\r\n\t\t\t&lt;/configuration&gt;\r\n\t\t&lt;/plugin&gt;\r\n\r\n\t&lt;/plugins&gt;\r\n&lt;/build&gt;<\/pre><\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:53","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:53"}]
[{"author":"仗剑执法1","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">java hashtable 到底是不是线程安全的？<\/h3>\n\n        <div class=\"new_content\"> \n          &nbsp;&nbsp; 如题，看网上很多人都说这个类是线程安全的，但我看了jdk1.6 的源码，并没有发现这类的线程安全机制，这个类到底是不是安全的，如果是的话，安全机制如何实现的？\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>/*\r<br /> * Copyright 2001-2004 The Apache Software Foundation.\r<br /> *\r<br /> * Licensed under the Apache License, Version 2.0 (the \"License\");\r<br /> * you may not use this file except in compliance with the License.\r<br /> * You may obtain a copy of the License at\r<br /> *\r<br /> *&nbsp;&nbsp;&nbsp;&nbsp; http://www.apache.org/licenses/LICENSE-2.0\r<br /> *\r<br /> * Unless required by applicable law or agreed to in writing, software\r<br /> * distributed under the License is distributed on an \"AS IS\" BASIS,\r<br /> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r<br /> * See the License for the specific language governing permissions and\r<br /> * limitations under the License.\r<br /> */\r<br />/*\r<br /> * $Id: Hashtable.java,v 1.4 2004/02/16 22:55:54 minchau Exp $\r<br /> */\r<br />\r<br />package com.sun.org.apache.xalan.internal.xsltc.runtime;\r<br />\r<br />import java.util.Enumeration;\r<br />\r<br />/**\r<br /> * IMPORTANT NOTE:\r<br /> * This code was taken from Sun's Java1.1 JDK java.util.HashTable.java\r<br /> * All \"synchronized\" keywords and some methods we do not need have been \r<br /> * all been removed.\r<br /> */\r<br />\r<br />/**\r<br /> * Object that wraps entries in the hash-table\r<br /> * @author Morten Jorgensen\r<br /> */\r<br />class HashtableEntry {\r<br />&nbsp;&nbsp;&nbsp; int hash;\r<br />&nbsp;&nbsp;&nbsp; Object key;\r<br />&nbsp;&nbsp;&nbsp; Object value;\r<br />&nbsp;&nbsp;&nbsp; HashtableEntry next;\r<br />\r<br />&nbsp;&nbsp;&nbsp; protected Object clone() {\r<br />\tHashtableEntry entry = new HashtableEntry();\r<br />\tentry.hash = hash;\r<br />\tentry.key = key;\r<br />\tentry.value = value;\r<br />\tentry.next = (next != null) ? (HashtableEntry)next.clone() : null;\r<br />\treturn entry;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />}\r<br />\r<br />/**\r<br /> * The main hash-table implementation\r<br /> */\r<br />public class Hashtable {\r<br />\r<br />&nbsp;&nbsp;&nbsp; private transient HashtableEntry table[]; // hash-table entries\r<br />&nbsp;&nbsp;&nbsp; private transient int count;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // number of entries\r<br />&nbsp;&nbsp;&nbsp; private int threshold;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // current size of hash-tabke\r<br />&nbsp;&nbsp;&nbsp; private float loadFactor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // load factor\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Constructs a new, empty hashtable with the specified initial \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * capacity and the specified load factor. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Hashtable(int initialCapacity, float loadFactor) {\r<br />\tif (initialCapacity &lt;= 0) initialCapacity = 11;\r<br />\tif (loadFactor &lt;= 0.0) loadFactor = 0.75f;\r<br />\tthis.loadFactor = loadFactor;\r<br />\ttable = new HashtableEntry[initialCapacity];\r<br />\tthreshold = (int)(initialCapacity * loadFactor);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Constructs a new, empty hashtable with the specified initial capacity\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * and default load factor.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Hashtable(int initialCapacity) {\r<br />\tthis(initialCapacity, 0.75f);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Constructs a new, empty hashtable with a default capacity and load\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * factor. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Hashtable() {\r<br />\tthis(101, 0.75f);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns the number of keys in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public int size() {\r<br />\treturn count;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Tests if this hashtable maps no keys to values.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public boolean isEmpty() {\r<br />\treturn count == 0;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns an enumeration of the keys in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Enumeration keys() {\r<br />\treturn new HashtableEnumerator(table, true);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns an enumeration of the values in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Use the Enumeration methods on the returned object to fetch the elements\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * sequentially.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Enumeration elements() {\r<br />\treturn new HashtableEnumerator(table, false);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Tests if some key maps into the specified value in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * This operation is more expensive than the &lt;code&gt;containsKey&lt;/code&gt;\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * method.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public boolean contains(Object value) {\r<br />\r<br />\tif (value == null) throw new NullPointerException();\r<br />\r<br />\tint i;\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\r<br />\tfor (i = tab.length ; i-- &gt; 0 ;) {\r<br />\t&nbsp;&nbsp;&nbsp; for (e = tab[i] ; e != null ; e = e.next) {\r<br />\t\tif (e.value.equals(value)) {\r<br />\t\t&nbsp;&nbsp;&nbsp; return true;\r<br />\t\t}\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />\treturn false;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Tests if the specified object is a key in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public boolean containsKey(Object key) {\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\r<br />\tfor (e = tab[index] ; e != null ; e = e.next)\r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key))\r<br />\t\treturn true;\r<br />\r<br />\treturn false;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns the value to which the specified key is mapped in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Object get(Object key) {\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\r<br />\tfor (e = tab[index] ; e != null ; e = e.next) \r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key)) \r<br />\t\treturn e.value;\r<br />\r<br />\treturn null;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Rehashes the contents of the hashtable into a hashtable with a \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * larger capacity. This method is called automatically when the \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * number of keys in the hashtable exceeds this hashtable's capacity \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * and load factor. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; protected void rehash() {\r<br />\tHashtableEntry e, old;\r<br />\tint i, index;\r<br />\tint oldCapacity = table.length;\r<br />\tHashtableEntry oldTable[] = table;\r<br />\r<br />\tint newCapacity = oldCapacity * 2 + 1;\r<br />\tHashtableEntry newTable[] = new HashtableEntry[newCapacity];\r<br />\r<br />\tthreshold = (int)(newCapacity * loadFactor);\r<br />\ttable = newTable;\r<br />\r<br />\tfor (i = oldCapacity ; i-- &gt; 0 ;) {\r<br />\t&nbsp;&nbsp;&nbsp; for (old = oldTable[i] ; old != null ; ) {\r<br />\t\te = old;\r<br />\t\told = old.next;\r<br />\t\tindex = (e.hash &amp; 0x7FFFFFFF) % newCapacity;\r<br />\t\te.next = newTable[index];\r<br />\t\tnewTable[index] = e;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * &lt;code&gt;value&lt;/code&gt; in this hashtable. Neither the key nor the \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * value can be &lt;code&gt;null&lt;/code&gt;. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * &lt;p&gt;\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * The value can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * with a key that is equal to the original key. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Object put(Object key, Object value) {\r<br />\t// Make sure the value is not null\r<br />\tif (value == null) throw new NullPointerException();\r<br />\r<br />\t// Makes sure the key is not already in the hashtable.\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\r<br />\tfor (e = tab[index] ; e != null ; e = e.next) {\r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key)) {\r<br />\t\tObject old = e.value;\r<br />\t\te.value = value;\r<br />\t\treturn old;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />\r<br />\t// Rehash the table if the threshold is exceeded\r<br />\tif (count &gt;= threshold) {\r<br />\t&nbsp;&nbsp;&nbsp; rehash();\r<br />\t&nbsp;&nbsp;&nbsp; return put(key, value);\r<br />\t} \r<br />\r<br />\t// Creates the new entry.\r<br />\te = new HashtableEntry();\r<br />\te.hash = hash;\r<br />\te.key = key;\r<br />\te.value = value;\r<br />\te.next = tab[index];\r<br />\ttab[index] = e;\r<br />\tcount++;\r<br />\treturn null;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Removes the key (and its corresponding value) from this \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * hashtable. This method does nothing if the key is not in the hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Object remove(Object key) {\r<br />\tHashtableEntry e, prev;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\tfor (e = tab[index], prev = null ; e != null ; prev = e, e = e.next) {\r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key)) {\r<br />\t\tif (prev != null)\r<br />\t\t&nbsp;&nbsp;&nbsp; prev.next = e.next;\r<br />\t\telse\r<br />\t\t&nbsp;&nbsp;&nbsp; tab[index] = e.next;\r<br />\t\tcount--;\r<br />\t\treturn e.value;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />\treturn null;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Clears this hashtable so that it contains no keys. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public void clear() {\r<br />\tHashtableEntry tab[] = table;\r<br />\tfor (int index = tab.length; --index &gt;= 0; )\r<br />\t&nbsp;&nbsp;&nbsp; tab[index] = null;\r<br />\tcount = 0;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns a rather long string representation of this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Handy for debugging - leave it here!!!\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public String toString() {\r<br />\tint i;\r<br />\tint max = size() - 1;\r<br />\tStringBuffer buf = new StringBuffer();\r<br />\tEnumeration k = keys();\r<br />\tEnumeration e = elements();\r<br />\tbuf.append(\"{\");\r<br />\r<br />\tfor (i = 0; i &lt;= max; i++) {\r<br />\t&nbsp;&nbsp;&nbsp; String s1 = k.nextElement().toString();\r<br />\t&nbsp;&nbsp;&nbsp; String s2 = e.nextElement().toString();\r<br />\t&nbsp;&nbsp;&nbsp; buf.append(s1 + \"=\" + s2);\r<br />\t&nbsp;&nbsp;&nbsp; if (i &lt; max) buf.append(\", \");\r<br />\t}\r<br />\tbuf.append(\"}\");\r<br />\treturn buf.toString();\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * A hashtable enumerator class.&nbsp; This class should remain opaque \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * to the client. It will use the Enumeration interface.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; class HashtableEnumerator implements Enumeration {\r<br />\tboolean keys;\r<br />\tint index;\r<br />\tHashtableEntry table[];\r<br />\tHashtableEntry entry;\r<br />\r<br />\tHashtableEnumerator(HashtableEntry table[], boolean keys) {\r<br />\t&nbsp;&nbsp;&nbsp; this.table = table;\r<br />\t&nbsp;&nbsp;&nbsp; this.keys = keys;\r<br />\t&nbsp;&nbsp;&nbsp; this.index = table.length;\r<br />\t}\r<br />\t\r<br />\tpublic boolean hasMoreElements() {\r<br />\t&nbsp;&nbsp;&nbsp; if (entry != null) {\r<br />\t\treturn true;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; while (index-- &gt; 0) {\r<br />\t\tif ((entry = table[index]) != null) {\r<br />\t\t&nbsp;&nbsp;&nbsp; return true;\r<br />\t\t}\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; return false;\r<br />\t}\r<br />\r<br />\tpublic Object nextElement() {\r<br />\t&nbsp;&nbsp;&nbsp; if (entry == null) {\r<br />\t\twhile ((index-- &gt; 0) &amp;&amp; ((entry = table[index]) == null));\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; if (entry != null) {\r<br />\t\tHashtableEntry e = entry;\r<br />\t\tentry = e.next;\r<br />\t\treturn keys ? e.key : e.value;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; return null;\r<br />\t}\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />}\r<br />\n          <\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-01 14:52:00","id":0,"source":"http://www.iteye.com/problems/102175","title":"java hashtable 到底是不是线程安全的？","typeId":0,"updateTime":"2014-07-01 14:52:00"},{"author":"kidneyball","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212050\">\n          <p><\/p><pre class=\"java\" name=\"code\">\r\n    public synchronized int size() {\r\n\r\n    public synchronized boolean isEmpty() {\r\n\r\n    public synchronized boolean contains(Object value) {\r\n\r\n    public synchronized Enumeration&lt;K&gt; keys() {\r\n\r\n    public synchronized V get(Object key) {\r\n\r\n    public synchronized V put(K key, V value) {\r\n\r\n    public synchronized V remove(Object key) {\r\n\r\n    public synchronized void putAll(Map&lt;? extends K, ? extends V&gt; t) {\r\n\r\n    public synchronized void clear() {\r\n\r\n    public synchronized Object clone() {\r\n\r\n    public synchronized String toString() {\r\n\r\n    private transient volatile Set&lt;K&gt; keySet = null;\r\n    private transient volatile Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = null;\r\n    private transient volatile Collection&lt;V&gt; values = null;\r\n\r\n\r\n    public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() {\r\n\tif (entrySet==null)\r\n\t    entrySet = Collections.synchronizedSet(new EntrySet(), this);\r\n\treturn entrySet;\r\n    }\r\n\r\n<\/pre>\r<br />\r<br />你再自己去查一下 synchronized，volatile，Collections.synchronizedSet 的用法吧。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:53","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:53"}]
[{"author":"xiaotqc000","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">spring mvc 事务失效问题<\/h3>\n\n        <div class=\"new_content\"> \n          <div class=\"iteye-blog-content-contain\" style=\"font-size: 14px;\">\r\n<p><span style=\"color: #000000;\"><strong>同时向两个表插入数据，第一条成功，第二条数据插入失败，第一条未回滚，具体配置如下<\/strong><\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000; font-size: 18px;\"><strong>applicationContext.xml 代码<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<\/span><br><span style=\"color: #000000;\">&lt;beans xmlns=\"<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:xsi=\"<a href=\"http://www.w3.org/2001/XMLSchema-instance\"><span style=\"color: #000000;\">http://www.w3.org/2001/XMLSchema-instance<\/span><\/a>\" xmlns:tx=\"<a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:context=\"<a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:mvc=\"<a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a>\" xmlns:util=\"<a href=\"http://www.springframework.org/schema/util\"><span style=\"color: #000000;\">http://www.springframework.org/schema/util<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:aop=\"<a href=\"http://www.springframework.org/schema/aop\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xsi:schemaLocation=\"<a href=\"http://www.springframework.org/schema/aop\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop<\/span><\/a> <a href=\"http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop/spring-aop-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a> <a href=\"http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a> <a href=\"http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/util\"><span style=\"color: #000000;\">http://www.springframework.org/schema/util<\/span><\/a> <a href=\"http://www.springframework.org/schema/util/spring-util-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/util/spring-util-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a> <a href=\"http://www.springframework.org/schema/tx/spring-tx-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a> <a href=\"http://www.springframework.org/schema/context/spring-context-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context/spring-context-3.1.xsd<\/span><\/a>\"&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!--将@Controller的注解排除掉 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;context:component-scan base-package=\"com\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;context:exclude-filter type=\"annotation\"<\/span><br><span style=\"color: #000000;\">???expression=\"org.springframework.stereotype.Controller\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/context:component-scan&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 读取配置文件 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;util:properties id=\"settings\"<\/span><br><span style=\"color: #000000;\">??location=\"classpath:config/global.properties\" /&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 读取数据库配置文件 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"configProperties\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"locations\"&gt;<\/span><br><span style=\"color: #000000;\">???&lt;list&gt;<\/span><br><span style=\"color: #000000;\">????&lt;value&gt;classpath:config/jdbc.properties&lt;/value&gt;<\/span><br><span style=\"color: #000000;\">???&lt;/list&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/property&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"propertyConfigurer\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"properties\" ref=\"configProperties\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;mvc:annotation-driven /&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 数据源 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"dataSource\" class=\"org.logicalcobwebs.proxool.ProxoolDataSource\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"driver\" value=\"${driver}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"driverUrl\" value=\"${driverUrl}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"user\" value=\"${user}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"password\" value=\"${password}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"alias\" value=\"proxool.aidecenter\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"maximumActiveTime\" value=\"300000\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"prototypeCount\" value=\"0\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"maximumConnectionCount\" value=\"${maximumConnectionCount}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"minimumConnectionCount\" value=\"${minimumConnectionCount}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"simultaneousBuildThrottle\" value=\"50\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"houseKeepingTestSql\" value=\"select form CURRENT_DATE\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;!-- JDBC模版 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"jdbc\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"staticMethod\" value=\"com.common.database.SpringDB.setJdbcTemplate\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"arguments\" ref=\"jdbc\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;!-- 事务管理器 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"transactionManager\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"dataSource\"&gt;<\/span><br><span style=\"color: #000000;\">???&lt;ref local=\"dataSource\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/property&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;!-- 事务模板 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"transactionTemplate\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.transaction.support.TransactionTemplate\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"transactionManager\"&gt;<\/span><br><span style=\"color: #000000;\">???&lt;ref local=\"transactionManager\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/property&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;aop:config&gt;<\/span><br><span style=\"color: #000000;\">??&lt;aop:pointcut id=\"transactionPointcut\"<\/span><br><span style=\"color: #000000;\">???expression=\"execution(* com.service..*.*(..))\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;aop:advisor pointcut-ref=\"transactionPointcut\"<\/span><br><span style=\"color: #000000;\">???advice-ref=\"advice\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/aop:config&gt;<\/span><br><span style=\"color: #000000;\">?&lt;tx:advice id=\"advice\" transaction-manager=\"transactionManager\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;tx:attributes&gt;<\/span><br><span style=\"color: #000000;\">???&lt;!-- 读取数据方法，一般采用只读事务 --&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"find*\" read-only=\"true\" /&gt;<\/span><br><span style=\"color: #000000;\">???&lt;!--以下方法，如save，update，delete等对数据库进行写入操作的方法，当产生Exception时进行回滚 --&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"save*\" propagation=\"REQUIRED\" /&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"update*\" /&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"delete*\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/tx:attributes&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/tx:advice&gt;<\/span><br><span style=\"color: #000000;\">?&lt;tx:annotation-driven transaction-manager=\"transactionManager\"<\/span><br><span style=\"color: #000000;\">??proxy-target-class=\"true\" /&gt;<\/span><br><span style=\"color: #000000;\">&lt;/beans&gt;<\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000; font-size: 18px;\"><strong>dispatcher-servlet.xml<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br>&lt;beans xmlns=\"<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a>\"<br>?xmlns:xsi=\"<a href=\"http://www.w3.org/2001/XMLSchema-instance\"><span style=\"color: #000000;\">http://www.w3.org/2001/XMLSchema-instance<\/span><\/a>\" xmlns:context=\"<a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a>\"<br>?xmlns:cache=\"<a href=\"http://www.springframework.org/schema/cache\"><span style=\"color: #000000;\">http://www.springframework.org/schema/cache<\/span><\/a>\" xmlns:aop=\"<a href=\"http://www.springframework.org/schema/aop\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop<\/span><\/a>\"<br>?xmlns:tx=\"<a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a>\" xmlns:jdbc=\"<a href=\"http://www.springframework.org/schema/jdbc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/jdbc<\/span><\/a>\"<br>?xmlns:mvc=\"<a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a>\"<br>?xsi:schemaLocation=\"<br>??????<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/context/spring-context-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context/spring-context-3.1.xsd<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/tx/spring-tx-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/jdbc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/jdbc<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd<\/span><\/a><br>??????????? <a href=\"http://www.springframework.org/schema/cache\"><span style=\"color: #000000;\">http://www.springframework.org/schema/cache<\/span><\/a> <br>??????????? <a href=\"http://www.springframework.org/schema/cache/spring-cache-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/cache/spring-cache-3.1.xsd<\/span><\/a><br>??????????? <a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a> <br>??????<a href=\"http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd<\/span><\/a>\"<br>?default-autowire=\"byName\"&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 将@Service注解给去掉 --&gt;<br>?&lt;context:component-scan base-package=\"com.controller\"&gt;<br>??&lt;context:include-filter type=\"annotation\"<br>???expression=\"org.springframework.stereotype.Controller\" /&gt;<br>??&lt;context:exclude-filter type=\"annotation\"<br>???expression=\"org.springframework.stereotype.Service\" /&gt;<br>?&lt;/context:component-scan&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;bean<br>??class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"&gt;<br>??&lt;property name=\"useSuffixPatternMatch\" value=\"true\" /&gt;<br>??&lt;property name=\"interceptors\"&gt;<br>???&lt;list&gt;<br>????&lt;ref bean=\"sessionInterceptor\"&gt;&lt;/ref&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --&gt;<br>?&lt;bean<br>??class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"&gt;<br>??&lt;property name=\"messageConverters\"&gt;<br>???&lt;list&gt;<br>????&lt;ref bean=\"mappingJacksonHttpMessageConverter\" /&gt;<br>????&lt;ref bean=\"stringHttpMessageConverter\" /&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<br>?&lt;!-- 负责读写字符串格式的数据 --&gt;<br>?&lt;bean id=\"stringHttpMessageConverter\"<br>??class=\"org.springframework.http.converter.StringHttpMessageConverter\"&gt;<br>??&lt;property name=\"supportedMediaTypes\"&gt;<br>???&lt;list&gt;<br>????&lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<br>?&lt;!-- 负责读写入json格式的数据 --&gt;<br>?&lt;bean id=\"mappingJacksonHttpMessageConverter\"<br>??class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"&gt;<br>??&lt;property name=\"supportedMediaTypes\"&gt;<br>???&lt;list&gt;<br>????&lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 拦截器 --&gt;<br>?&lt;bean id=\"sessionInterceptor\" class=\"com.interceptor.SessionInterceptor\"&gt;&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 --&gt;<br>?&lt;bean id=\"viewResolver\"<br>??class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;<br>??&lt;property name=\"viewClass\"<br>???value=\"org.springframework.web.servlet.view.JstlView\" /&gt;<br>??&lt;property name=\"prefix\" value=\"\" /&gt;<br>??&lt;property name=\"suffix\" value=\".jsp\" /&gt;<br>?&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 启用缓存注解功能，该注解一定要声明在Spring主配置文件中才会生效 --&gt;<br>?&lt;cache:annotation-driven cache-manager=\"cacheManager\" /&gt;<br>?&lt;bean id=\"cacheManager\"<br>??class=\"org.springframework.cache.concurrent.ConcurrentMapCacheManager\" /&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 资源文件加载 --&gt;<br>?&lt;mvc:resources mapping=\"/upload/**\" location=\"/upload/\"<br>??cache-period=\"31556926\" /&gt;<br>?&lt;mvc:resources mapping=\"/libs/**\" location=\"/libs/\"<br>??cache-period=\"31556926\" /&gt;<br>&lt;/beans&gt;<strong><br>上传的图片为包结构<\/strong><\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000;\"><strong>Service的注解在接口实现类中<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\"><strong>@Service<br>@Transactional<br>public class SiteServiceImpl implements SiteService {<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\"><strong>.......<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\"><strong>}<\/strong><\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000;\">请问是哪里配置错了么<\/span><\/p>\r\n<\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>上传附件为包结构\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>实现类\r<br />package com.service.site.impl;\r<br />\r<br />import java.util.List;\r<br />import java.util.Map;\r<br />\r<br />import org.springframework.beans.factory.annotation.Autowired;\r<br />import org.springframework.stereotype.Service;\r<br />import org.springframework.transaction.annotation.Transactional;\r<br />\r<br />import com.common.TableName;\r<br />import com.dao.BaseDao;\r<br />import com.service.site.SiteService;\r<br />\r<br />@Service\r<br />@Transactional\r<br />public class SiteServiceImpl implements SiteService {\r<br />\r<br />\t@Autowired\r<br />\tBaseDao baseDao;\r<br />\r<br />\t@Override\r<br />\tpublic int saveSite(String tableName, Map&lt;String, Object&gt; map) throws Exception {\r<br />\t\treturn baseDao.save(tableName, map, SiteServiceImpl.class);\r<br />\t}\r<br />\r<br />\t@Override\r<br />\tpublic int updateSite(String tableName, Map&lt;String, Object&gt; updateMap, Map&lt;String, Object&gt; whereMap) throws Exception {\r<br />\t\treturn baseDao.update(tableName, updateMap, whereMap, SiteServiceImpl.class);\r<br />\t}\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>Controller类\r<br />package com.controller.site;\r<br />\r<br />import java.util.HashMap;\r<br />import java.util.Map;\r<br />\r<br />import org.springframework.beans.factory.annotation.Autowired;\r<br />import org.springframework.stereotype.Controller;\r<br />import org.springframework.web.bind.annotation.RequestMapping;\r<br />import org.springframework.web.bind.annotation.RequestMethod;\r<br />import org.springframework.web.bind.annotation.ResponseBody;\r<br />\r<br />import com.common.Public;\r<br />import com.common.TableName;\r<br />import com.entity.site.Site;\r<br />import com.service.site.SiteService;\r<br />import com.service.systemmanage.FunctionMenuService;\r<br />import com.service.table.TableService;\r<br />\r<br />@Controller\r<br />@RequestMapping(value = \"/Site\")\r<br />public class SiteController {\r<br />\r<br />\t@Autowired\r<br />\tSiteService ss;\r<br />\r<br />\t@Autowired\r<br />\tTableService ts;\r<br />\r<br />\t@RequestMapping(value = \"/addSite\", method = RequestMethod.POST)\r<br />\t@ResponseBody\r<br />\tpublic int add(Site site) throws Throwable {\r<br />\t\tMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();\r<br />\t\tmap.put(\"site_id\", Public.generalStandardId());\r<br />\t\tss.saveSite(TableName.webissue_site_list, map); // 这个保存成功\r<br />\t\tMap&lt;String, Object&gt; map1 = new HashMap&lt;String, Object&gt;();\r<br />\t\tmap1.put(\"id\", Public.generalStandardId());\r<br />\t\tmap1.put(\"name1\", \"aaa\");\r<br />\t\tts.saveTable(\"Table_1\", map1); // 这个保存肯定失败\r<br />\t\treturn 1;\r<br />\t}\r<br />\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>BaseDao实现类\r<br />package com.dao.impl;\r<br />\r<br />import java.util.ArrayList;\r<br />import java.util.Iterator;\r<br />import java.util.List;\r<br />import java.util.Map;\r<br />\r<br />import org.springframework.stereotype.Repository;\r<br />import org.springframework.transaction.annotation.Propagation;\r<br />import org.springframework.transaction.annotation.Transactional;\r<br />\r<br />import com.common.database.SpringDB;\r<br />import com.dao.BaseDao;\r<br />\r<br />@Repository\r<br />@Transactional\r<br />public class BaseDaoImpl extends SpringDB implements BaseDao {\r<br />\r<br />\t/**\r<br />\t * 添加数据\r<br />\t */\r<br />\t@Override\r<br />\tpublic &lt;T&gt; int save(String tableName, Map&lt;String, Object&gt; map, Class&lt;T&gt; clazz) throws Exception {\r<br />\t\tif (tableName != null &amp;&amp; tableName.length() &gt; 0) {\r<br />\t\t\tStringBuffer sql = new StringBuffer();\r<br />\t\t\tStringBuffer sql2 = new StringBuffer();\r<br />\t\t\tList&lt;Object&gt; params = new ArrayList&lt;Object&gt;();\r<br />\t\t\tsql.append(\"insert into \" + tableName + \" (\");\r<br />\t\t\tfor (Iterator&lt;String&gt; iterator = map.keySet().iterator(); iterator.hasNext();) {\r<br />\t\t\t\tString colName = iterator.next();\r<br />\t\t\t\tObject colVal = map.get(colName);\r<br />\t\t\t\tif (iterator.hasNext()) {\r<br />\t\t\t\t\tsql.append(colName + \",\");\r<br />\t\t\t\t\tsql2.append(\"?, \");\r<br />\t\t\t\t} else {\r<br />\t\t\t\t\tsql.append(colName + \") values(\");\r<br />\t\t\t\t\tsql2.append(\"?)\");\r<br />\t\t\t\t}\r<br />\t\t\t\tparams.add(colVal);\r<br />\t\t\t}\r<br />\t\t\treturn this.executeUpdate(sql.toString() + sql2.toString(), params.toArray(), clazz);\r<br />\t\t} else {\r<br />\t\t\treturn -1;\r<br />\t\t}\r<br />\t}\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>数据库连接\r<br />package com.common.database;\r<br />\r<br />import org.apache.log4j.Logger;\r<br />import org.springframework.jdbc.core.JdbcTemplate;\r<br />\r<br />public class SpringDB {\r<br />\r<br />\tprivate static JdbcTemplate jdbc;\r<br />\r<br />\tpublic static void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\r<br />\t\tSpringDB.jdbc = jdbcTemplate;\r<br />\t}\r<br />\r<br />\t/**\r<br />\t * 增、删、改，类型为int\r<br />\t * \r<br />\t * @param sql\r<br />\t *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要执行的sql语句\r<br />\t * @param params\r<br />\t *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sql所对应的参数列表\r<br />\t * @param clazz\r<br />\t *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 调用类\r<br />\t * @return 成功返回1,失败返回-1\r<br />\t */\r<br />\tprotected &lt;T&gt; int executeUpdate(String sql, Object[] params, Class&lt;T&gt; clazz) {\r<br />\t\tLogger log = Logger.getLogger(clazz);\r<br />\t\t//try {\r<br />\t\t\treturn jdbc.update(sql, params);\r<br />\t\t//} catch (Exception e) {\r<br />\t\t//\tlog.error(clazz + e.getMessage(), e);\r<br />\t\t//\treturn -1;\r<br />\t\t//}\r<br />\t}\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>com\r<br />&nbsp; controller包\r<br />&nbsp;&nbsp;&nbsp; site\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SiteController.java\r<br />&nbsp; dao包\r<br />&nbsp;&nbsp;&nbsp; impl\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BaseDaoImpl.java\r<br />&nbsp;&nbsp;&nbsp; BaseDao.java\r<br />&nbsp; service包\r<br />&nbsp;&nbsp;&nbsp; site\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; impl\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SiteServiceImpl.java\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SiteService.java\r<br />&nbsp;&nbsp;&nbsp; \n          <\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-30 11:04:00","id":0,"source":"http://www.iteye.com/problems/102159","title":"spring mvc 事务失效问题","typeId":0,"updateTime":"2014-06-30 11:04:00"},{"author":"FirstBlood","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212049\">\n          <p>这个错误多明显啊，你事物定义到service包上面，然后你在controller包里调用了2个service去操作两张表。这俩个service的事物已经不在一个上下文里了。\r<br />\r<br />Spring的事物是需要这样的。\r<br />\r<br />@tran.....\r<br />public void doxx() {\r<br />dao.save(A表)\r<br />dao.delete(B表)\r<br />}\r<br />\r<br />这样才能生效啊。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:54","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:54"}]
[{"author":"powertoolsteam","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">使用控件对企业有那些好处？<\/h3>\n\n        <div class=\"new_content\"> \n          做过软件开发的筒子们，冒个泡。\r<br />\r<br />我先开个头：\r<br />?节省人力成本。\r<br />?缩短开发周期和发布时间。\r<br />?在不增加开发团队人力和时间的基础上增加了更丰富的常用功能。\r<br />?让开发人员更专注于业务需求，提升核心竞争力。\r<br />?提升系统稳定性和性能。控件经过了长期的优化和严格测试，并且通过了各个不同行业和不同使用者的检验。\r<br />\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-27 11:07:00","id":0,"source":"http://www.iteye.com/problems/102135","title":"使用控件对企业有那些好处？","typeId":0,"updateTime":"2014-06-27 11:07:00"},{"author":"h248980496","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212037\">\n          <p>好处和缺点是并存的，控件需要学习周期，有些刁钻的需求实现不了，使开发人员的技能变得狭窄，当然好处也不少，好处楼主已经列的差不多了，稍微补充一下，控件容易形成统一，千奇百怪的实现思路很容易被一个中间件统一成唯一最佳用例，由此维护成本其实总体是降低的，另外，中间件风格比较统一，这样与企业有长期合作的公司会发现自己买的项目或产品长得都差不多，使用已经比较熟练，价格也比较好估算。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:54","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:54"}]
[{"author":"yuanbian007","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">深入学习java的困惑：3年开发，下一步学习的方向以及要做什么？<\/h3>\n\n        <div class=\"new_content\"> \n          楼主做java3年了，时间不长不短。职位么，因为跳槽多次，仍是普通程序员，关于跳槽频繁这一点，刚刚觉得非常不妥。\r<br />最近很长的一段时间，我对下一步的学习方向，或者说java的学习方向，充满了困惑。\r<br />困惑1：在工作上遇到的很多技术上的东西，都给我一种感觉----不做不知道，谁做谁都会。要做一个东西，或者遇到一个问题的时候，往往是用到第三方类库，这些东西一般做过也只能记个大概，代码是肯定记不住的，还是要现用现查；没做过的，在网上一查往往也能查出一堆，拿过来修修改改，80%以上的问题都能解决。除了这些，就是一些基本的代码，有一定基础都可以写的不差。\r<br />不知道是我接触的东西太少，还是本就是这样。如果是前者，烦请比我更明悟的人，来指点我一下。\r<br />\r<br />困惑2：进一步学习的方向。因为在大多数时候都是面对困惑1里面的情况，而我觉得这些是肯定肯定不够的，就在想下一步应该怎样进步，学习什么。这也是本次提问的主要问题，对于一个3年经验的普通java开发，下一步的学习方向是什么？有没有较为清晰的归类，比如架构师、DBA之类的。\r<br />不得不承认，对于很流行的大数据、高并发，楼主缺少一些经验，1是接触的机会不多，2是此类工作大多需要工作经验。想过要自己学习，不过应该只能学到些皮毛。\r<br />\r<br />工作接触的一些技术也不少了，比如nginx,memcached,mongodb,dubbo framework,InnoDB,linux等等一些暂时想不起的，但只通过工作和一些课外学习，也没有了解的很深入。也许是，我缺少一个可以更深入学习的工作？也许是，因为跳槽过多，没有一个稳定的业务方向，也就没有遇到更深入的问题？\r<br />\r<br />总之，我最近是挺困惑，脑子也有点乱。希望各位资深大牛来给些建议，和我一样困惑的程序员们，也一起来讨论\r<br />\r<br />\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-23 18:13:00","id":0,"source":"http://www.iteye.com/problems/102084","title":"深入学习java的困惑：3年开发，下一步学习的方向以及要做什么？","typeId":0,"updateTime":"2014-06-23 18:13:00"},{"author":"aubdiy","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_211896\">\n          <p>在java领域摸爬3年之际时，跟你有很多共鸣，\r<br />当年，杂七杂八的各种开源第三方工具类用了不少，广而不精，\r<br />当年，也纠结如何提升自己， 纠结该如何走下去。\r<br />\r<br />\r<br />我想继续做技术，于是我问了自己几个问题：\r<br />\r<br />1.既然既然会了很多各种各样的工具，是否对工具的使用有自己的总结？\r<br />\r<br />于是，我开始写博客，记录自己的学习成果， \r<br />写一些工具的测试代码，以便以后使用时，拿起来就用\r<br />\r<br />2.工具的使用都整理了，那么是否整合出自己的一套开发框架？\r<br />然后我自己就整合了strut2 + spring2.5 + ibatis,\r<br />随着技术的发展，我重新整合了velocity + springmvc + spring3 + mybatis\r<br />包括工程架构：maven结构的工程，优化打包方式（轻松区分本地、测试、上线环境）\r<br />使用代码检查工具：Findbugs CheckStyle\r<br />做到团队代码风格基本一致。\r<br />\r<br />\r<br />3.既然整合开发机构，是否能有套生成器，生成基本代码（增删改查）？\r<br />然后我就使用基础的jdbcapi读取数据库表信息，使用velocity 模板引擎，开发了一套生成器， 给团队工作效率带来了质的提高\r<br />\r<br />4.以上都有了，如何做分层开发，动静分离？\r<br />然后，我就将架构中模板引擎部分velocity 去掉， 直接使用html, 动态数据使用异步获取，动态数据服务端返回json， 页面开发人员（会css,js）和服务端开人员各司其职，再一次提高了开发效率\r<br />\r<br />\r<br />4.当访问量上来的了，发现页面动态数据访问还是有些慢？\r<br />然后在不做负载均均衡的情况下， 学了jvm的内存机制和gc调优，最大的优化单机能力\r<br />\r<br />再然后。。。先省略，看到这里我打算写一篇小博客^_^\r<br />\r<br />\r<br />\r<br />\r<br />\r<br /><\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:55","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:55"}]
[{"author":"fcdxdx","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">系统操作日志的设计，大家有什么好的思路？<\/h3>\n\n        <div class=\"new_content\"> \n          我现在要做一个人事管理系统，客户提出资料在修改时需要申请审核，在审核时需要把修改的字段以及修改之前和修改之后的值都列出来。不知道大家有什么好的思路？？\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-25 17:08:00","id":0,"source":"http://www.iteye.com/problems/102113","title":"系统操作日志的设计，大家有什么好的思路？","typeId":0,"updateTime":"2014-06-25 17:08:00"},{"author":"xjyylc","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_211959\">\n          <p>针对需要的业务模块，添加一个影像表。该报和业务表结构基本相同（注意关联关系）。\r<br />审批页面，分别从业务表和业务相应的影像表取数据，给予展示。用户一直操作的是影像表，待审批通过后，用影响表覆盖业务表，同时删除影像表数据。这里的删除得考虑一下，是物理删除还是逻辑删除。若数据重要，建议逻辑删除(注意数据的备份）。创建个表，记录每一条SQL操作语句。这张表根据自己需求设计吧。\r<br /><\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:02:55","id":0,"questionId":0,"updateTime":"2014-07-04 23:02:55"}]
[{"author":"Dreamsture","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">将json对象转化为java对象？<\/h3>\n\n        <div class=\"new_content\"> \n          TestBean tb = new TestBean();\r<br />tb.setName(\"闫燕飞\");\r<br />tb.setSex(\"男\");\r<br />List&lt;String&gt; list = new ArrayList&lt;String&gt;();\r<br />list.add(\"mother\");\r<br />list.add(\"father\");\r<br />tb.setParentName(list);\r<br />//将一个实体类对象转化为json对象\r<br />JSONObject jo1= JSONObject.fromObject(tb);\r<br />\r<br />//将json对象转化为java对象(这里编译通过，执行的时候报异常)\r<br />TestBean tb1 = (TestBean)JSONSerializer.toJava(jo1);\r<br />\r<br />\r<br />\r<br />\r<br />异常：Exception in thread \"main\" java.lang.ClassCastException: net.sf.ezmorph.bean.MorphDynaBean cannot be cast to com.second.TestBean\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>请大家帮忙分析一下这是为什么？谢谢\n          <\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-02 16:46:00","id":0,"source":"http://www.iteye.com/problems/102191","title":"将json对象转化为java对象？","typeId":0,"updateTime":"2014-07-02 16:46:00"},{"author":"gagapear","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212082\">\n          <p>加这两行在TestBean tb1 = (TestBean)JSONSerializer.toJava(jo1); 前面试试\r<br />\r<br />net.sf.json.JsonConfig jsonConfig = new net.sf.json.JsonConfig();\r<br />jsonConfig.setRootClass(TestBean.class);<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:12","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:12"}]
[{"author":"newstong1","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">地址栏输入excel文件，乱码<\/h3>\n\n        <div class=\"new_content\"> \n          http://127.0.0.1:8080/xxx/aaa.xls\r<br />\r<br />输入完乱码，但有的IE不乱直接下载，有的就乱码，为什么，如何解决\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-02 16:17:00","id":0,"source":"http://www.iteye.com/problems/102188","title":"地址栏输入excel文件，乱码","typeId":0,"updateTime":"2014-07-02 16:17:00"},{"author":"energykey","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212076\">\n          <p>在TOMCAT的web.xml文件里加入&nbsp; \r<br />&lt;mime-mapping&gt; \r<br />&nbsp;&nbsp;&nbsp; &lt;extension&gt;xls&lt;/extension&gt; \r<br />&nbsp;&nbsp;&nbsp; &lt;mime-type&gt;application/vnd.ms-excel&lt;/mime-type&gt; \r<br />&nbsp; &lt;/mime-mapping&gt;\r<br />\r<br />浏览器就是根据mime-type来判断是图片还是文件还是网页的。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:13","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:13"}]
[{"author":"舅是来坑你的","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">JS正则表达式整检查输入字符串是否符合正整数格式<\/h3>\n\n        <div class=\"new_content\"> \n          以下是JS代码\r<br />是对分页做了一个判断\r<br />\r<br />&lt;a href=\"javascript:submitPageForm('bxgMaterialManageForm',2,10)\"&gt;&lt;/a&gt;\r<br />这个是下一页\r<br />调试的时候JS内获取到s对象\r<br />值为2\r<br />但是到if (s.search(re) != -1) {\r<br />这个地方会报TypeError: s.search is not a function\r<br />这个错误为什么？\r<br />/*\r<br />用途：检查输入字符串是否符合正整数格式\r<br />输入：\r<br />\ts：字符串\r<br />返回：\r<br />\t如果通过验证返回true,否则返回false\t\r<br />*/\r<br />function isNumber( s ){&nbsp;&nbsp; \r<br />\tvar regu = \"^[0-9]+$\";\r<br />\tvar re = new RegExp(regu);\r<br />\tif (s.search(re) != -1) {\r<br />\t&nbsp;&nbsp; return true;\r<br />\t} else {\r<br />\t&nbsp;&nbsp; return false;\r<br />\t}\r<br />}\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-30 16:51:00","id":0,"source":"http://www.iteye.com/problems/102166","title":"JS正则表达式整检查输入字符串是否符合正整数格式","typeId":0,"updateTime":"2014-06-30 16:51:00"},{"author":"a496649849","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212046\">\n          <p>应该是由于别的原因导致的，我刚刚测试一下你的函数s.search 这里没有问题<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:13","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:13"}]
[{"author":"rapin","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">Spring Security认证后 如何获取更多的用户信息?<\/h3>\n\n        <div class=\"new_content\"> \n          <div class=\"iteye-blog-content-contain\" style=\"font-size: 14px;\">\r\n<p>使用Spring Security认证后，如何在页面中获取更多的用户信息？<\/p>\r\n<p>例如用户的电话号码、email地址等等，这些数据如何自定义到用户信息里？<\/p>\r\n<p>?<\/p>\r\n<p>?<\/p>\r\n<\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-26 18:01:00","id":0,"source":"http://www.iteye.com/problems/102126","title":"Spring Security认证后 如何获取更多的用户信息?","typeId":0,"updateTime":"2014-06-26 18:01:00"},{"author":"ieanwfg201","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_211979\">\n          <p>具体实现例子我没有，但是可以给你说下怎么样去获取。\r<br />一般情况下，如果你扩展springscurity，都会扩展自己的用户以及权限验证，而springsecurity的默认UserDetail应该是不包含你的这些信息的，所以如果你要获取这些信息，要不是在验证过程中直接将这些信息放入authorication对象中，要不就是从数据库中读取。两种放入操作如下\r<br />1 扩展userdetail对象，将你的邮件，手机登信息加进去。然后自定义自己的验证方法类，在验证完成后，见对应的这些信息同时从数据库获取到，并设置到这个userdetail中，同时将包好了userdetail的authorication对象放入session中。这样你可以直接从session中获取到了，这种方法是最直接的方式，很方便，需要做的是你自己扩展userdetail以及权限管理这一块，网上很多这种实现。另外，关于你如何获取到session中的authorication对象，我记得struts2和springmvc都是有获取方法的，你可以查询下。\r<br />2 第二种更简单了，就是你无需扩展，但是每次需要展示页面这些信息的，自己去数据库查询并且传入到前台去即可。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:14","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:14"}]
[{"author":"lee3836","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">maven打war 自定义properties 到jsp页面<\/h3>\n\n        <div class=\"new_content\"> \n          在maven打war包时，pom.xml自定义的properites 可以打到*.properties文件中，但是在*.jsp中引用自定义变量无法打入，求一份可以打到jsp中的pom.xml\r<br />\r<br />自定义变量是在pom.xml的 profile properties 中定义的，比如以下域名：图片域名、样式域名等等。在jsp页面中有引入样式形如\r<br /><pre class=\"java\" name=\"code\">&lt;link href=\"${profile.xxx.domain}/a/b/c.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;<\/pre>\r<br />\r<br />profile.xxx.domain 实在 pom.xml 中\r<br /> <pre class=\"java\" name=\"code\">&lt;profile&gt;\r\n            &lt;id&gt;development-ws&lt;/id&gt;\r\n            &lt;properties&gt;\r\n&lt;profile.xxx.domain&gt;http://www.jd.com/&lt;/profile.xxx.domain&gt;\r\n          &lt;/properties&gt;\r\n        &lt;/profile&gt;<\/pre>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-02 11:39:00","id":0,"source":"http://www.iteye.com/problems/102182","title":"maven打war 自定义properties 到jsp页面","typeId":0,"updateTime":"2014-07-02 11:39:00"},{"author":"hae","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212068\">\n          <p>给你个完整的看看:\r<br />\r<br /><\/p><pre class=\"java\" name=\"code\">&lt;build&gt;\r\n\t&lt;resources&gt;\r\n\t\t&lt;resource&gt;\r\n\t\t\t&lt;directory&gt;src/main/resources&lt;/directory&gt;\r\n\t\t\t&lt;includes&gt;\r\n\t\t\t\t&lt;include&gt;*.*&lt;/include&gt;\r\n\t\t\t\t&lt;include&gt;**/*.*&lt;/include&gt;\r\n\t\t\t&lt;/includes&gt;\r\n\t\t\t&lt;filtering&gt;true&lt;/filtering&gt;\r\n\t\t&lt;/resource&gt;\r\n\t&lt;/resources&gt;\t\r\n\t&lt;plugins&gt;\r\n\t\t&lt;!-- compiler插件, 设定JDK版本 --&gt;\r\n\t\t&lt;plugin&gt;\r\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\r\n\t\t\t&lt;version&gt;3.0&lt;/version&gt;\r\n\t\t\t&lt;configuration&gt;\r\n\t\t\t\t&lt;source&gt;${jdk.version}&lt;/source&gt;\r\n\t\t\t\t&lt;target&gt;${jdk.version}&lt;/target&gt;\r\n\t\t\t\t&lt;showWarnings&gt;true&lt;/showWarnings&gt;\r\n\t\t\t&lt;/configuration&gt;\r\n\t\t&lt;/plugin&gt;\r\n\r\n\t\t&lt;!-- war打包插件, 设定war包名称不带版本号 --&gt;\r\n\t\t&lt;plugin&gt;\r\n\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\r\n\t\t\t&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\r\n\t\t\t&lt;version&gt;2.3&lt;/version&gt;\r\n\t\t\t&lt;configuration&gt;\r\n\t\t\t\t&lt;warName&gt;${project.artifactId}&lt;/warName&gt;\r\n\t\t\t\t&lt;webResources&gt;\r\n\t\t\t\t\t&lt;resource&gt;\r\n\t\t\t\t\t\t&lt;directory&gt;src/main/webapp&lt;/directory&gt;\r\n\t\t\t\t\t\t&lt;includes&gt;\r\n\t\t\t\t\t\t\t&lt;include&gt;*.*&lt;/include&gt;\r\n\t\t\t\t\t\t\t&lt;include&gt;**/*.*&lt;/include&gt;\r\n\t\t\t\t\t\t&lt;/includes&gt;\r\n\t\t\t\t\t\t&lt;filtering&gt;true&lt;/filtering&gt;\r\n\t\t\t\t\t&lt;/resource&gt;\r\n\t\t\t\t&lt;/webResources&gt;\r\n\t\t\t&lt;/configuration&gt;\r\n\t\t&lt;/plugin&gt;\r\n\r\n\t&lt;/plugins&gt;\r\n&lt;/build&gt;<\/pre><\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:14","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:14"}]
[{"author":"仗剑执法1","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">java hashtable 到底是不是线程安全的？<\/h3>\n\n        <div class=\"new_content\"> \n          &nbsp;&nbsp; 如题，看网上很多人都说这个类是线程安全的，但我看了jdk1.6 的源码，并没有发现这类的线程安全机制，这个类到底是不是安全的，如果是的话，安全机制如何实现的？\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>/*\r<br /> * Copyright 2001-2004 The Apache Software Foundation.\r<br /> *\r<br /> * Licensed under the Apache License, Version 2.0 (the \"License\");\r<br /> * you may not use this file except in compliance with the License.\r<br /> * You may obtain a copy of the License at\r<br /> *\r<br /> *&nbsp;&nbsp;&nbsp;&nbsp; http://www.apache.org/licenses/LICENSE-2.0\r<br /> *\r<br /> * Unless required by applicable law or agreed to in writing, software\r<br /> * distributed under the License is distributed on an \"AS IS\" BASIS,\r<br /> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r<br /> * See the License for the specific language governing permissions and\r<br /> * limitations under the License.\r<br /> */\r<br />/*\r<br /> * $Id: Hashtable.java,v 1.4 2004/02/16 22:55:54 minchau Exp $\r<br /> */\r<br />\r<br />package com.sun.org.apache.xalan.internal.xsltc.runtime;\r<br />\r<br />import java.util.Enumeration;\r<br />\r<br />/**\r<br /> * IMPORTANT NOTE:\r<br /> * This code was taken from Sun's Java1.1 JDK java.util.HashTable.java\r<br /> * All \"synchronized\" keywords and some methods we do not need have been \r<br /> * all been removed.\r<br /> */\r<br />\r<br />/**\r<br /> * Object that wraps entries in the hash-table\r<br /> * @author Morten Jorgensen\r<br /> */\r<br />class HashtableEntry {\r<br />&nbsp;&nbsp;&nbsp; int hash;\r<br />&nbsp;&nbsp;&nbsp; Object key;\r<br />&nbsp;&nbsp;&nbsp; Object value;\r<br />&nbsp;&nbsp;&nbsp; HashtableEntry next;\r<br />\r<br />&nbsp;&nbsp;&nbsp; protected Object clone() {\r<br />\tHashtableEntry entry = new HashtableEntry();\r<br />\tentry.hash = hash;\r<br />\tentry.key = key;\r<br />\tentry.value = value;\r<br />\tentry.next = (next != null) ? (HashtableEntry)next.clone() : null;\r<br />\treturn entry;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />}\r<br />\r<br />/**\r<br /> * The main hash-table implementation\r<br /> */\r<br />public class Hashtable {\r<br />\r<br />&nbsp;&nbsp;&nbsp; private transient HashtableEntry table[]; // hash-table entries\r<br />&nbsp;&nbsp;&nbsp; private transient int count;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // number of entries\r<br />&nbsp;&nbsp;&nbsp; private int threshold;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // current size of hash-tabke\r<br />&nbsp;&nbsp;&nbsp; private float loadFactor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // load factor\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Constructs a new, empty hashtable with the specified initial \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * capacity and the specified load factor. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Hashtable(int initialCapacity, float loadFactor) {\r<br />\tif (initialCapacity &lt;= 0) initialCapacity = 11;\r<br />\tif (loadFactor &lt;= 0.0) loadFactor = 0.75f;\r<br />\tthis.loadFactor = loadFactor;\r<br />\ttable = new HashtableEntry[initialCapacity];\r<br />\tthreshold = (int)(initialCapacity * loadFactor);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Constructs a new, empty hashtable with the specified initial capacity\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * and default load factor.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Hashtable(int initialCapacity) {\r<br />\tthis(initialCapacity, 0.75f);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Constructs a new, empty hashtable with a default capacity and load\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * factor. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Hashtable() {\r<br />\tthis(101, 0.75f);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns the number of keys in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public int size() {\r<br />\treturn count;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Tests if this hashtable maps no keys to values.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public boolean isEmpty() {\r<br />\treturn count == 0;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns an enumeration of the keys in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Enumeration keys() {\r<br />\treturn new HashtableEnumerator(table, true);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns an enumeration of the values in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Use the Enumeration methods on the returned object to fetch the elements\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * sequentially.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Enumeration elements() {\r<br />\treturn new HashtableEnumerator(table, false);\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Tests if some key maps into the specified value in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * This operation is more expensive than the &lt;code&gt;containsKey&lt;/code&gt;\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * method.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public boolean contains(Object value) {\r<br />\r<br />\tif (value == null) throw new NullPointerException();\r<br />\r<br />\tint i;\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\r<br />\tfor (i = tab.length ; i-- &gt; 0 ;) {\r<br />\t&nbsp;&nbsp;&nbsp; for (e = tab[i] ; e != null ; e = e.next) {\r<br />\t\tif (e.value.equals(value)) {\r<br />\t\t&nbsp;&nbsp;&nbsp; return true;\r<br />\t\t}\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />\treturn false;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Tests if the specified object is a key in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public boolean containsKey(Object key) {\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\r<br />\tfor (e = tab[index] ; e != null ; e = e.next)\r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key))\r<br />\t\treturn true;\r<br />\r<br />\treturn false;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns the value to which the specified key is mapped in this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Object get(Object key) {\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\r<br />\tfor (e = tab[index] ; e != null ; e = e.next) \r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key)) \r<br />\t\treturn e.value;\r<br />\r<br />\treturn null;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Rehashes the contents of the hashtable into a hashtable with a \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * larger capacity. This method is called automatically when the \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * number of keys in the hashtable exceeds this hashtable's capacity \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * and load factor. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; protected void rehash() {\r<br />\tHashtableEntry e, old;\r<br />\tint i, index;\r<br />\tint oldCapacity = table.length;\r<br />\tHashtableEntry oldTable[] = table;\r<br />\r<br />\tint newCapacity = oldCapacity * 2 + 1;\r<br />\tHashtableEntry newTable[] = new HashtableEntry[newCapacity];\r<br />\r<br />\tthreshold = (int)(newCapacity * loadFactor);\r<br />\ttable = newTable;\r<br />\r<br />\tfor (i = oldCapacity ; i-- &gt; 0 ;) {\r<br />\t&nbsp;&nbsp;&nbsp; for (old = oldTable[i] ; old != null ; ) {\r<br />\t\te = old;\r<br />\t\told = old.next;\r<br />\t\tindex = (e.hash &amp; 0x7FFFFFFF) % newCapacity;\r<br />\t\te.next = newTable[index];\r<br />\t\tnewTable[index] = e;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * &lt;code&gt;value&lt;/code&gt; in this hashtable. Neither the key nor the \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * value can be &lt;code&gt;null&lt;/code&gt;. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * &lt;p&gt;\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * The value can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * with a key that is equal to the original key. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Object put(Object key, Object value) {\r<br />\t// Make sure the value is not null\r<br />\tif (value == null) throw new NullPointerException();\r<br />\r<br />\t// Makes sure the key is not already in the hashtable.\r<br />\tHashtableEntry e;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\r<br />\tfor (e = tab[index] ; e != null ; e = e.next) {\r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key)) {\r<br />\t\tObject old = e.value;\r<br />\t\te.value = value;\r<br />\t\treturn old;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />\r<br />\t// Rehash the table if the threshold is exceeded\r<br />\tif (count &gt;= threshold) {\r<br />\t&nbsp;&nbsp;&nbsp; rehash();\r<br />\t&nbsp;&nbsp;&nbsp; return put(key, value);\r<br />\t} \r<br />\r<br />\t// Creates the new entry.\r<br />\te = new HashtableEntry();\r<br />\te.hash = hash;\r<br />\te.key = key;\r<br />\te.value = value;\r<br />\te.next = tab[index];\r<br />\ttab[index] = e;\r<br />\tcount++;\r<br />\treturn null;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Removes the key (and its corresponding value) from this \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * hashtable. This method does nothing if the key is not in the hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public Object remove(Object key) {\r<br />\tHashtableEntry e, prev;\r<br />\tHashtableEntry tab[] = table;\r<br />\tint hash = key.hashCode();\r<br />\tint index = (hash &amp; 0x7FFFFFFF) % tab.length;\r<br />\tfor (e = tab[index], prev = null ; e != null ; prev = e, e = e.next) {\r<br />\t&nbsp;&nbsp;&nbsp; if ((e.hash == hash) &amp;&amp; e.key.equals(key)) {\r<br />\t\tif (prev != null)\r<br />\t\t&nbsp;&nbsp;&nbsp; prev.next = e.next;\r<br />\t\telse\r<br />\t\t&nbsp;&nbsp;&nbsp; tab[index] = e.next;\r<br />\t\tcount--;\r<br />\t\treturn e.value;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t}\r<br />\treturn null;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Clears this hashtable so that it contains no keys. \r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public void clear() {\r<br />\tHashtableEntry tab[] = table;\r<br />\tfor (int index = tab.length; --index &gt;= 0; )\r<br />\t&nbsp;&nbsp;&nbsp; tab[index] = null;\r<br />\tcount = 0;\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Returns a rather long string representation of this hashtable.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * Handy for debugging - leave it here!!!\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; public String toString() {\r<br />\tint i;\r<br />\tint max = size() - 1;\r<br />\tStringBuffer buf = new StringBuffer();\r<br />\tEnumeration k = keys();\r<br />\tEnumeration e = elements();\r<br />\tbuf.append(\"{\");\r<br />\r<br />\tfor (i = 0; i &lt;= max; i++) {\r<br />\t&nbsp;&nbsp;&nbsp; String s1 = k.nextElement().toString();\r<br />\t&nbsp;&nbsp;&nbsp; String s2 = e.nextElement().toString();\r<br />\t&nbsp;&nbsp;&nbsp; buf.append(s1 + \"=\" + s2);\r<br />\t&nbsp;&nbsp;&nbsp; if (i &lt; max) buf.append(\", \");\r<br />\t}\r<br />\tbuf.append(\"}\");\r<br />\treturn buf.toString();\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />&nbsp;&nbsp;&nbsp; /**\r<br />&nbsp;&nbsp;&nbsp;&nbsp; * A hashtable enumerator class.&nbsp; This class should remain opaque \r<br />&nbsp;&nbsp;&nbsp;&nbsp; * to the client. It will use the Enumeration interface.\r<br />&nbsp;&nbsp;&nbsp;&nbsp; */\r<br />&nbsp;&nbsp;&nbsp; class HashtableEnumerator implements Enumeration {\r<br />\tboolean keys;\r<br />\tint index;\r<br />\tHashtableEntry table[];\r<br />\tHashtableEntry entry;\r<br />\r<br />\tHashtableEnumerator(HashtableEntry table[], boolean keys) {\r<br />\t&nbsp;&nbsp;&nbsp; this.table = table;\r<br />\t&nbsp;&nbsp;&nbsp; this.keys = keys;\r<br />\t&nbsp;&nbsp;&nbsp; this.index = table.length;\r<br />\t}\r<br />\t\r<br />\tpublic boolean hasMoreElements() {\r<br />\t&nbsp;&nbsp;&nbsp; if (entry != null) {\r<br />\t\treturn true;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; while (index-- &gt; 0) {\r<br />\t\tif ((entry = table[index]) != null) {\r<br />\t\t&nbsp;&nbsp;&nbsp; return true;\r<br />\t\t}\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; return false;\r<br />\t}\r<br />\r<br />\tpublic Object nextElement() {\r<br />\t&nbsp;&nbsp;&nbsp; if (entry == null) {\r<br />\t\twhile ((index-- &gt; 0) &amp;&amp; ((entry = table[index]) == null));\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; if (entry != null) {\r<br />\t\tHashtableEntry e = entry;\r<br />\t\tentry = e.next;\r<br />\t\treturn keys ? e.key : e.value;\r<br />\t&nbsp;&nbsp;&nbsp; }\r<br />\t&nbsp;&nbsp;&nbsp; return null;\r<br />\t}\r<br />&nbsp;&nbsp;&nbsp; }\r<br />\r<br />}\r<br />\n          <\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-07-01 14:52:00","id":0,"source":"http://www.iteye.com/problems/102175","title":"java hashtable 到底是不是线程安全的？","typeId":0,"updateTime":"2014-07-01 14:52:00"},{"author":"kidneyball","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212050\">\n          <p><\/p><pre class=\"java\" name=\"code\">\r\n    public synchronized int size() {\r\n\r\n    public synchronized boolean isEmpty() {\r\n\r\n    public synchronized boolean contains(Object value) {\r\n\r\n    public synchronized Enumeration&lt;K&gt; keys() {\r\n\r\n    public synchronized V get(Object key) {\r\n\r\n    public synchronized V put(K key, V value) {\r\n\r\n    public synchronized V remove(Object key) {\r\n\r\n    public synchronized void putAll(Map&lt;? extends K, ? extends V&gt; t) {\r\n\r\n    public synchronized void clear() {\r\n\r\n    public synchronized Object clone() {\r\n\r\n    public synchronized String toString() {\r\n\r\n    private transient volatile Set&lt;K&gt; keySet = null;\r\n    private transient volatile Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = null;\r\n    private transient volatile Collection&lt;V&gt; values = null;\r\n\r\n\r\n    public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() {\r\n\tif (entrySet==null)\r\n\t    entrySet = Collections.synchronizedSet(new EntrySet(), this);\r\n\treturn entrySet;\r\n    }\r\n\r\n<\/pre>\r<br />\r<br />你再自己去查一下 synchronized，volatile，Collections.synchronizedSet 的用法吧。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:14","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:14"}]
[{"author":"xiaotqc000","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">spring mvc 事务失效问题<\/h3>\n\n        <div class=\"new_content\"> \n          <div class=\"iteye-blog-content-contain\" style=\"font-size: 14px;\">\r\n<p><span style=\"color: #000000;\"><strong>同时向两个表插入数据，第一条成功，第二条数据插入失败，第一条未回滚，具体配置如下<\/strong><\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000; font-size: 18px;\"><strong>applicationContext.xml 代码<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<\/span><br><span style=\"color: #000000;\">&lt;beans xmlns=\"<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:xsi=\"<a href=\"http://www.w3.org/2001/XMLSchema-instance\"><span style=\"color: #000000;\">http://www.w3.org/2001/XMLSchema-instance<\/span><\/a>\" xmlns:tx=\"<a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:context=\"<a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:mvc=\"<a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a>\" xmlns:util=\"<a href=\"http://www.springframework.org/schema/util\"><span style=\"color: #000000;\">http://www.springframework.org/schema/util<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xmlns:aop=\"<a href=\"http://www.springframework.org/schema/aop\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop<\/span><\/a>\"<\/span><br><span style=\"color: #000000;\">?xsi:schemaLocation=\"<a href=\"http://www.springframework.org/schema/aop\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop<\/span><\/a> <a href=\"http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop/spring-aop-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a> <a href=\"http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a> <a href=\"http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/util\"><span style=\"color: #000000;\">http://www.springframework.org/schema/util<\/span><\/a> <a href=\"http://www.springframework.org/schema/util/spring-util-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/util/spring-util-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a> <a href=\"http://www.springframework.org/schema/tx/spring-tx-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd<\/span><\/a><\/span><br><span style=\"color: #000000;\">??<a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a> <a href=\"http://www.springframework.org/schema/context/spring-context-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context/spring-context-3.1.xsd<\/span><\/a>\"&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!--将@Controller的注解排除掉 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;context:component-scan base-package=\"com\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;context:exclude-filter type=\"annotation\"<\/span><br><span style=\"color: #000000;\">???expression=\"org.springframework.stereotype.Controller\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/context:component-scan&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 读取配置文件 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;util:properties id=\"settings\"<\/span><br><span style=\"color: #000000;\">??location=\"classpath:config/global.properties\" /&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 读取数据库配置文件 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"configProperties\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"locations\"&gt;<\/span><br><span style=\"color: #000000;\">???&lt;list&gt;<\/span><br><span style=\"color: #000000;\">????&lt;value&gt;classpath:config/jdbc.properties&lt;/value&gt;<\/span><br><span style=\"color: #000000;\">???&lt;/list&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/property&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"propertyConfigurer\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"properties\" ref=\"configProperties\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;mvc:annotation-driven /&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 数据源 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"dataSource\" class=\"org.logicalcobwebs.proxool.ProxoolDataSource\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"driver\" value=\"${driver}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"driverUrl\" value=\"${driverUrl}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"user\" value=\"${user}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"password\" value=\"${password}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"alias\" value=\"proxool.aidecenter\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"maximumActiveTime\" value=\"300000\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"prototypeCount\" value=\"0\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"maximumConnectionCount\" value=\"${maximumConnectionCount}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"minimumConnectionCount\" value=\"${minimumConnectionCount}\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"simultaneousBuildThrottle\" value=\"50\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"houseKeepingTestSql\" value=\"select form CURRENT_DATE\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;!-- JDBC模版 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"jdbc\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"staticMethod\" value=\"com.common.database.SpringDB.setJdbcTemplate\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"arguments\" ref=\"jdbc\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;!-- 事务管理器 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"transactionManager\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"dataSource\"&gt;<\/span><br><span style=\"color: #000000;\">???&lt;ref local=\"dataSource\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/property&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;!-- 事务模板 --&gt;<\/span><br><span style=\"color: #000000;\">?&lt;bean id=\"transactionTemplate\"<\/span><br><span style=\"color: #000000;\">??class=\"org.springframework.transaction.support.TransactionTemplate\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;property name=\"transactionManager\"&gt;<\/span><br><span style=\"color: #000000;\">???&lt;ref local=\"transactionManager\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/property&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/bean&gt;<\/span><br><span style=\"color: #000000;\">?&lt;aop:config&gt;<\/span><br><span style=\"color: #000000;\">??&lt;aop:pointcut id=\"transactionPointcut\"<\/span><br><span style=\"color: #000000;\">???expression=\"execution(* com.service..*.*(..))\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;aop:advisor pointcut-ref=\"transactionPointcut\"<\/span><br><span style=\"color: #000000;\">???advice-ref=\"advice\" /&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/aop:config&gt;<\/span><br><span style=\"color: #000000;\">?&lt;tx:advice id=\"advice\" transaction-manager=\"transactionManager\"&gt;<\/span><br><span style=\"color: #000000;\">??&lt;tx:attributes&gt;<\/span><br><span style=\"color: #000000;\">???&lt;!-- 读取数据方法，一般采用只读事务 --&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"find*\" read-only=\"true\" /&gt;<\/span><br><span style=\"color: #000000;\">???&lt;!--以下方法，如save，update，delete等对数据库进行写入操作的方法，当产生Exception时进行回滚 --&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"save*\" propagation=\"REQUIRED\" /&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"update*\" /&gt;<\/span><br><span style=\"color: #000000;\">???&lt;tx:method name=\"delete*\" /&gt;<\/span><br><span style=\"color: #000000;\">??&lt;/tx:attributes&gt;<\/span><br><span style=\"color: #000000;\">?&lt;/tx:advice&gt;<\/span><br><span style=\"color: #000000;\">?&lt;tx:annotation-driven transaction-manager=\"transactionManager\"<\/span><br><span style=\"color: #000000;\">??proxy-target-class=\"true\" /&gt;<\/span><br><span style=\"color: #000000;\">&lt;/beans&gt;<\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000; font-size: 18px;\"><strong>dispatcher-servlet.xml<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br>&lt;beans xmlns=\"<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a>\"<br>?xmlns:xsi=\"<a href=\"http://www.w3.org/2001/XMLSchema-instance\"><span style=\"color: #000000;\">http://www.w3.org/2001/XMLSchema-instance<\/span><\/a>\" xmlns:context=\"<a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a>\"<br>?xmlns:cache=\"<a href=\"http://www.springframework.org/schema/cache\"><span style=\"color: #000000;\">http://www.springframework.org/schema/cache<\/span><\/a>\" xmlns:aop=\"<a href=\"http://www.springframework.org/schema/aop\"><span style=\"color: #000000;\">http://www.springframework.org/schema/aop<\/span><\/a>\"<br>?xmlns:tx=\"<a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a>\" xmlns:jdbc=\"<a href=\"http://www.springframework.org/schema/jdbc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/jdbc<\/span><\/a>\"<br>?xmlns:mvc=\"<a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a>\"<br>?xsi:schemaLocation=\"<br>??????<a href=\"http://www.springframework.org/schema/beans\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/context\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/context/spring-context-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/context/spring-context-3.1.xsd<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/tx\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/tx/spring-tx-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/jdbc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/jdbc<\/span><\/a>? <br>??????????? <a href=\"http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd<\/span><\/a><br>??????????? <a href=\"http://www.springframework.org/schema/cache\"><span style=\"color: #000000;\">http://www.springframework.org/schema/cache<\/span><\/a> <br>??????????? <a href=\"http://www.springframework.org/schema/cache/spring-cache-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/cache/spring-cache-3.1.xsd<\/span><\/a><br>??????????? <a href=\"http://www.springframework.org/schema/mvc\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc<\/span><\/a> <br>??????<a href=\"http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd\"><span style=\"color: #000000;\">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd<\/span><\/a>\"<br>?default-autowire=\"byName\"&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 将@Service注解给去掉 --&gt;<br>?&lt;context:component-scan base-package=\"com.controller\"&gt;<br>??&lt;context:include-filter type=\"annotation\"<br>???expression=\"org.springframework.stereotype.Controller\" /&gt;<br>??&lt;context:exclude-filter type=\"annotation\"<br>???expression=\"org.springframework.stereotype.Service\" /&gt;<br>?&lt;/context:component-scan&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;bean<br>??class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"&gt;<br>??&lt;property name=\"useSuffixPatternMatch\" value=\"true\" /&gt;<br>??&lt;property name=\"interceptors\"&gt;<br>???&lt;list&gt;<br>????&lt;ref bean=\"sessionInterceptor\"&gt;&lt;/ref&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --&gt;<br>?&lt;bean<br>??class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"&gt;<br>??&lt;property name=\"messageConverters\"&gt;<br>???&lt;list&gt;<br>????&lt;ref bean=\"mappingJacksonHttpMessageConverter\" /&gt;<br>????&lt;ref bean=\"stringHttpMessageConverter\" /&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<br>?&lt;!-- 负责读写字符串格式的数据 --&gt;<br>?&lt;bean id=\"stringHttpMessageConverter\"<br>??class=\"org.springframework.http.converter.StringHttpMessageConverter\"&gt;<br>??&lt;property name=\"supportedMediaTypes\"&gt;<br>???&lt;list&gt;<br>????&lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<br>?&lt;!-- 负责读写入json格式的数据 --&gt;<br>?&lt;bean id=\"mappingJacksonHttpMessageConverter\"<br>??class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"&gt;<br>??&lt;property name=\"supportedMediaTypes\"&gt;<br>???&lt;list&gt;<br>????&lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;<br>???&lt;/list&gt;<br>??&lt;/property&gt;<br>?&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 拦截器 --&gt;<br>?&lt;bean id=\"sessionInterceptor\" class=\"com.interceptor.SessionInterceptor\"&gt;&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 --&gt;<br>?&lt;bean id=\"viewResolver\"<br>??class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;<br>??&lt;property name=\"viewClass\"<br>???value=\"org.springframework.web.servlet.view.JstlView\" /&gt;<br>??&lt;property name=\"prefix\" value=\"\" /&gt;<br>??&lt;property name=\"suffix\" value=\".jsp\" /&gt;<br>?&lt;/bean&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 启用缓存注解功能，该注解一定要声明在Spring主配置文件中才会生效 --&gt;<br>?&lt;cache:annotation-driven cache-manager=\"cacheManager\" /&gt;<br>?&lt;bean id=\"cacheManager\"<br>??class=\"org.springframework.cache.concurrent.ConcurrentMapCacheManager\" /&gt;<\/span><\/p>\r\n<p><span style=\"color: #000000;\">?&lt;!-- 资源文件加载 --&gt;<br>?&lt;mvc:resources mapping=\"/upload/**\" location=\"/upload/\"<br>??cache-period=\"31556926\" /&gt;<br>?&lt;mvc:resources mapping=\"/libs/**\" location=\"/libs/\"<br>??cache-period=\"31556926\" /&gt;<br>&lt;/beans&gt;<strong><br>上传的图片为包结构<\/strong><\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000;\"><strong>Service的注解在接口实现类中<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\"><strong>@Service<br>@Transactional<br>public class SiteServiceImpl implements SiteService {<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\"><strong>.......<\/strong><\/span><\/p>\r\n<p><span style=\"color: #000000;\"><strong>}<\/strong><\/span><\/p>\r\n<p>?<\/p>\r\n<p><span style=\"color: #000000;\">请问是哪里配置错了么<\/span><\/p>\r\n<\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>上传附件为包结构\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>实现类\r<br />package com.service.site.impl;\r<br />\r<br />import java.util.List;\r<br />import java.util.Map;\r<br />\r<br />import org.springframework.beans.factory.annotation.Autowired;\r<br />import org.springframework.stereotype.Service;\r<br />import org.springframework.transaction.annotation.Transactional;\r<br />\r<br />import com.common.TableName;\r<br />import com.dao.BaseDao;\r<br />import com.service.site.SiteService;\r<br />\r<br />@Service\r<br />@Transactional\r<br />public class SiteServiceImpl implements SiteService {\r<br />\r<br />\t@Autowired\r<br />\tBaseDao baseDao;\r<br />\r<br />\t@Override\r<br />\tpublic int saveSite(String tableName, Map&lt;String, Object&gt; map) throws Exception {\r<br />\t\treturn baseDao.save(tableName, map, SiteServiceImpl.class);\r<br />\t}\r<br />\r<br />\t@Override\r<br />\tpublic int updateSite(String tableName, Map&lt;String, Object&gt; updateMap, Map&lt;String, Object&gt; whereMap) throws Exception {\r<br />\t\treturn baseDao.update(tableName, updateMap, whereMap, SiteServiceImpl.class);\r<br />\t}\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>Controller类\r<br />package com.controller.site;\r<br />\r<br />import java.util.HashMap;\r<br />import java.util.Map;\r<br />\r<br />import org.springframework.beans.factory.annotation.Autowired;\r<br />import org.springframework.stereotype.Controller;\r<br />import org.springframework.web.bind.annotation.RequestMapping;\r<br />import org.springframework.web.bind.annotation.RequestMethod;\r<br />import org.springframework.web.bind.annotation.ResponseBody;\r<br />\r<br />import com.common.Public;\r<br />import com.common.TableName;\r<br />import com.entity.site.Site;\r<br />import com.service.site.SiteService;\r<br />import com.service.systemmanage.FunctionMenuService;\r<br />import com.service.table.TableService;\r<br />\r<br />@Controller\r<br />@RequestMapping(value = \"/Site\")\r<br />public class SiteController {\r<br />\r<br />\t@Autowired\r<br />\tSiteService ss;\r<br />\r<br />\t@Autowired\r<br />\tTableService ts;\r<br />\r<br />\t@RequestMapping(value = \"/addSite\", method = RequestMethod.POST)\r<br />\t@ResponseBody\r<br />\tpublic int add(Site site) throws Throwable {\r<br />\t\tMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();\r<br />\t\tmap.put(\"site_id\", Public.generalStandardId());\r<br />\t\tss.saveSite(TableName.webissue_site_list, map); // 这个保存成功\r<br />\t\tMap&lt;String, Object&gt; map1 = new HashMap&lt;String, Object&gt;();\r<br />\t\tmap1.put(\"id\", Public.generalStandardId());\r<br />\t\tmap1.put(\"name1\", \"aaa\");\r<br />\t\tts.saveTable(\"Table_1\", map1); // 这个保存肯定失败\r<br />\t\treturn 1;\r<br />\t}\r<br />\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>BaseDao实现类\r<br />package com.dao.impl;\r<br />\r<br />import java.util.ArrayList;\r<br />import java.util.Iterator;\r<br />import java.util.List;\r<br />import java.util.Map;\r<br />\r<br />import org.springframework.stereotype.Repository;\r<br />import org.springframework.transaction.annotation.Propagation;\r<br />import org.springframework.transaction.annotation.Transactional;\r<br />\r<br />import com.common.database.SpringDB;\r<br />import com.dao.BaseDao;\r<br />\r<br />@Repository\r<br />@Transactional\r<br />public class BaseDaoImpl extends SpringDB implements BaseDao {\r<br />\r<br />\t/**\r<br />\t * 添加数据\r<br />\t */\r<br />\t@Override\r<br />\tpublic &lt;T&gt; int save(String tableName, Map&lt;String, Object&gt; map, Class&lt;T&gt; clazz) throws Exception {\r<br />\t\tif (tableName != null &amp;&amp; tableName.length() &gt; 0) {\r<br />\t\t\tStringBuffer sql = new StringBuffer();\r<br />\t\t\tStringBuffer sql2 = new StringBuffer();\r<br />\t\t\tList&lt;Object&gt; params = new ArrayList&lt;Object&gt;();\r<br />\t\t\tsql.append(\"insert into \" + tableName + \" (\");\r<br />\t\t\tfor (Iterator&lt;String&gt; iterator = map.keySet().iterator(); iterator.hasNext();) {\r<br />\t\t\t\tString colName = iterator.next();\r<br />\t\t\t\tObject colVal = map.get(colName);\r<br />\t\t\t\tif (iterator.hasNext()) {\r<br />\t\t\t\t\tsql.append(colName + \",\");\r<br />\t\t\t\t\tsql2.append(\"?, \");\r<br />\t\t\t\t} else {\r<br />\t\t\t\t\tsql.append(colName + \") values(\");\r<br />\t\t\t\t\tsql2.append(\"?)\");\r<br />\t\t\t\t}\r<br />\t\t\t\tparams.add(colVal);\r<br />\t\t\t}\r<br />\t\t\treturn this.executeUpdate(sql.toString() + sql2.toString(), params.toArray(), clazz);\r<br />\t\t} else {\r<br />\t\t\treturn -1;\r<br />\t\t}\r<br />\t}\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>数据库连接\r<br />package com.common.database;\r<br />\r<br />import org.apache.log4j.Logger;\r<br />import org.springframework.jdbc.core.JdbcTemplate;\r<br />\r<br />public class SpringDB {\r<br />\r<br />\tprivate static JdbcTemplate jdbc;\r<br />\r<br />\tpublic static void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\r<br />\t\tSpringDB.jdbc = jdbcTemplate;\r<br />\t}\r<br />\r<br />\t/**\r<br />\t * 增、删、改，类型为int\r<br />\t * \r<br />\t * @param sql\r<br />\t *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要执行的sql语句\r<br />\t * @param params\r<br />\t *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sql所对应的参数列表\r<br />\t * @param clazz\r<br />\t *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 调用类\r<br />\t * @return 成功返回1,失败返回-1\r<br />\t */\r<br />\tprotected &lt;T&gt; int executeUpdate(String sql, Object[] params, Class&lt;T&gt; clazz) {\r<br />\t\tLogger log = Logger.getLogger(clazz);\r<br />\t\t//try {\r<br />\t\t\treturn jdbc.update(sql, params);\r<br />\t\t//} catch (Exception e) {\r<br />\t\t//\tlog.error(clazz + e.getMessage(), e);\r<br />\t\t//\treturn -1;\r<br />\t\t//}\r<br />\t}\r<br />}\r<br />\n          <\/div>\n          \n          <div class=\"replenishment\">\n            <hr class='new_hr' />\n            <span class=\"strong_rep\">问题补充：<\/span>com\r<br />&nbsp; controller包\r<br />&nbsp;&nbsp;&nbsp; site\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SiteController.java\r<br />&nbsp; dao包\r<br />&nbsp;&nbsp;&nbsp; impl\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BaseDaoImpl.java\r<br />&nbsp;&nbsp;&nbsp; BaseDao.java\r<br />&nbsp; service包\r<br />&nbsp;&nbsp;&nbsp; site\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; impl\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SiteServiceImpl.java\r<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SiteService.java\r<br />&nbsp;&nbsp;&nbsp; \n          <\/div>\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-30 11:04:00","id":0,"source":"http://www.iteye.com/problems/102159","title":"spring mvc 事务失效问题","typeId":0,"updateTime":"2014-06-30 11:04:00"},{"author":"FirstBlood","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212049\">\n          <p>这个错误多明显啊，你事物定义到service包上面，然后你在controller包里调用了2个service去操作两张表。这俩个service的事物已经不在一个上下文里了。\r<br />\r<br />Spring的事物是需要这样的。\r<br />\r<br />@tran.....\r<br />public void doxx() {\r<br />dao.save(A表)\r<br />dao.delete(B表)\r<br />}\r<br />\r<br />这样才能生效啊。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:15","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:15"}]
[{"author":"powertoolsteam","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">使用控件对企业有那些好处？<\/h3>\n\n        <div class=\"new_content\"> \n          做过软件开发的筒子们，冒个泡。\r<br />\r<br />我先开个头：\r<br />?节省人力成本。\r<br />?缩短开发周期和发布时间。\r<br />?在不增加开发团队人力和时间的基础上增加了更丰富的常用功能。\r<br />?让开发人员更专注于业务需求，提升核心竞争力。\r<br />?提升系统稳定性和性能。控件经过了长期的优化和严格测试，并且通过了各个不同行业和不同使用者的检验。\r<br />\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-27 11:07:00","id":0,"source":"http://www.iteye.com/problems/102135","title":"使用控件对企业有那些好处？","typeId":0,"updateTime":"2014-06-27 11:07:00"},{"author":"h248980496","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_212037\">\n          <p>好处和缺点是并存的，控件需要学习周期，有些刁钻的需求实现不了，使开发人员的技能变得狭窄，当然好处也不少，好处楼主已经列的差不多了，稍微补充一下，控件容易形成统一，千奇百怪的实现思路很容易被一个中间件统一成唯一最佳用例，由此维护成本其实总体是降低的，另外，中间件风格比较统一，这样与企业有长期合作的公司会发现自己买的项目或产品长得都差不多，使用已经比较熟练，价格也比较好估算。<\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:16","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:16"}]
[{"author":"yuanbian007","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">深入学习java的困惑：3年开发，下一步学习的方向以及要做什么？<\/h3>\n\n        <div class=\"new_content\"> \n          楼主做java3年了，时间不长不短。职位么，因为跳槽多次，仍是普通程序员，关于跳槽频繁这一点，刚刚觉得非常不妥。\r<br />最近很长的一段时间，我对下一步的学习方向，或者说java的学习方向，充满了困惑。\r<br />困惑1：在工作上遇到的很多技术上的东西，都给我一种感觉----不做不知道，谁做谁都会。要做一个东西，或者遇到一个问题的时候，往往是用到第三方类库，这些东西一般做过也只能记个大概，代码是肯定记不住的，还是要现用现查；没做过的，在网上一查往往也能查出一堆，拿过来修修改改，80%以上的问题都能解决。除了这些，就是一些基本的代码，有一定基础都可以写的不差。\r<br />不知道是我接触的东西太少，还是本就是这样。如果是前者，烦请比我更明悟的人，来指点我一下。\r<br />\r<br />困惑2：进一步学习的方向。因为在大多数时候都是面对困惑1里面的情况，而我觉得这些是肯定肯定不够的，就在想下一步应该怎样进步，学习什么。这也是本次提问的主要问题，对于一个3年经验的普通java开发，下一步的学习方向是什么？有没有较为清晰的归类，比如架构师、DBA之类的。\r<br />不得不承认，对于很流行的大数据、高并发，楼主缺少一些经验，1是接触的机会不多，2是此类工作大多需要工作经验。想过要自己学习，不过应该只能学到些皮毛。\r<br />\r<br />工作接触的一些技术也不少了，比如nginx,memcached,mongodb,dubbo framework,InnoDB,linux等等一些暂时想不起的，但只通过工作和一些课外学习，也没有了解的很深入。也许是，我缺少一个可以更深入学习的工作？也许是，因为跳槽过多，没有一个稳定的业务方向，也就没有遇到更深入的问题？\r<br />\r<br />总之，我最近是挺困惑，脑子也有点乱。希望各位资深大牛来给些建议，和我一样困惑的程序员们，也一起来讨论\r<br />\r<br />\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-23 18:13:00","id":0,"source":"http://www.iteye.com/problems/102084","title":"深入学习java的困惑：3年开发，下一步学习的方向以及要做什么？","typeId":0,"updateTime":"2014-06-23 18:13:00"},{"author":"aubdiy","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_211896\">\n          <p>在java领域摸爬3年之际时，跟你有很多共鸣，\r<br />当年，杂七杂八的各种开源第三方工具类用了不少，广而不精，\r<br />当年，也纠结如何提升自己， 纠结该如何走下去。\r<br />\r<br />\r<br />我想继续做技术，于是我问了自己几个问题：\r<br />\r<br />1.既然既然会了很多各种各样的工具，是否对工具的使用有自己的总结？\r<br />\r<br />于是，我开始写博客，记录自己的学习成果， \r<br />写一些工具的测试代码，以便以后使用时，拿起来就用\r<br />\r<br />2.工具的使用都整理了，那么是否整合出自己的一套开发框架？\r<br />然后我自己就整合了strut2 + spring2.5 + ibatis,\r<br />随着技术的发展，我重新整合了velocity + springmvc + spring3 + mybatis\r<br />包括工程架构：maven结构的工程，优化打包方式（轻松区分本地、测试、上线环境）\r<br />使用代码检查工具：Findbugs CheckStyle\r<br />做到团队代码风格基本一致。\r<br />\r<br />\r<br />3.既然整合开发机构，是否能有套生成器，生成基本代码（增删改查）？\r<br />然后我就使用基础的jdbcapi读取数据库表信息，使用velocity 模板引擎，开发了一套生成器， 给团队工作效率带来了质的提高\r<br />\r<br />4.以上都有了，如何做分层开发，动静分离？\r<br />然后，我就将架构中模板引擎部分velocity 去掉， 直接使用html, 动态数据使用异步获取，动态数据服务端返回json， 页面开发人员（会css,js）和服务端开人员各司其职，再一次提高了开发效率\r<br />\r<br />\r<br />4.当访问量上来的了，发现页面动态数据访问还是有些慢？\r<br />然后在不做负载均均衡的情况下， 学了jvm的内存机制和gc调优，最大的优化单机能力\r<br />\r<br />再然后。。。先省略，看到这里我打算写一篇小博客^_^\r<br />\r<br />\r<br />\r<br />\r<br />\r<br /><\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:16","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:16"}]
[{"author":"fcdxdx","clickNumber":0,"content":"<div class=\"sproblem_right\">\n        <h3 class=\"close\">系统操作日志的设计，大家有什么好的思路？<\/h3>\n\n        <div class=\"new_content\"> \n          我现在要做一个人事管理系统，客户提出资料在修改时需要申请审核，在审核时需要把修改的字段以及修改之前和修改之后的值都列出来。不知道大家有什么好的思路？？\n          \n        <\/div>\n\n        \n        \n      <\/div>","createTime":"2014-06-25 17:08:00","id":0,"source":"http://www.iteye.com/problems/102113","title":"系统操作日志的设计，大家有什么好的思路？","typeId":0,"updateTime":"2014-06-25 17:08:00"},{"author":"xjyylc","content":"<div class=\"accept_solution\">\n      <h3>采纳的答案<\/h3>\n      <div class=\"solution solution_dd\" id=\"s_211959\">\n          <p>针对需要的业务模块，添加一个影像表。该报和业务表结构基本相同（注意关联关系）。\r<br />审批页面，分别从业务表和业务相应的影像表取数据，给予展示。用户一直操作的是影像表，待审批通过后，用影响表覆盖业务表，同时删除影像表数据。这里的删除得考虑一下，是物理删除还是逻辑删除。若数据重要，建议逻辑删除(注意数据的备份）。创建个表，记录每一条SQL操作语句。这张表根据自己需求设计吧。\r<br /><\/p>\n      <\/div>\n    <\/div>","createTime":"2014-07-04 23:45:17","id":0,"questionId":0,"updateTime":"2014-07-04 23:45:17"}]
